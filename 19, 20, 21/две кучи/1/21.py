# Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в одну из куч (по своему выбору) один камень или увеличить количество камней в куче в два раза. Например, пусть в одной куче 10 камней, а в другой 5 камней; такую позицию в игре будем обозначать (10, 5). Тогда за один ход можно получить любую из четырёх позиций: (11, 5), (20, 5), (10, 6), (10, 10). Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.
# Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 77. Победителем считается игрок, сделавший последний ход, т. е. первым получивший такую позицию, при которой в кучах будет 77 или больше камней.
# В начальный момент в первой куче было семь камней, во второй куче — S камней; 1 ≤ S ≤ 69.
# Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока — значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т. е. не являющиеся выигрышными независимо от игры противника.
# Найдите минимальное значение S, при котором одновременно выполняются два условия:
# — у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;
# — у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.


TARGET = 77 # Сумма камней в кучках, при которых игра заканчивается
result = {}

def my_game(x, y):
    if (x, y) in result:
        return result[(x, y)]

    if x + y >= TARGET:
        return 0

    next_step_code = [my_game(x + 1, y), my_game(x, y + 1), my_game(x * 2, y), my_game(x, y * 2)]
    n_list = [c for c in next_step_code if c <= 0]
    
    if n_list:
        step = - max(n_list) + 1
    else:
        step = - max(next_step_code)
        
    result[(x, y)] = step
    return step

x = 7
for S in range(TARGET - x - 1, 0, -1):
    res = my_game(x, S)

    if res == -2:  # Позиция -2 - выигрышная для второго игрока
        print(f"{S}, {res}")